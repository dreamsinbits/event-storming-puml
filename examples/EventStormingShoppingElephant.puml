@startuml
!startsub DECL

!include ../PlantUml/EventStorming.iuml

!$user = 'User'
!$recurringItemsList = 'Recurring items list'
!$recipe = 'Recipe'
!$shoppingList = 'Shopping list'
!$mealPlan = 'Meal plan'
!$shopper = 'Shopper'
!$mealPlanView = 'Meal Plan View'
!$shoppingListView = 'Shopping List View'
!$sharingView = 'Sharing View'
!$shoppingView = 'Shopping View'
!$voucherView = 'Voucher View'
!$registerView = 'Register View'
!$shopping = 'Shopping'
!$loginView = 'Username, password'
!$registerView = 'First name, last name, e-mail, username, password'

!endsub

!startsub UserManagement

SubDomain('User Management', UserManagement) {
    DomainEvent('Deleted user', DeletedUser, $Aggregate($user), $Command(DeleteUser), $User($shopper))
    DomainEvent('Logged out', LoggedOut, $Aggregate($user), $Command(LogOutUser), $User($shopper), $ReadModel($loginView))
    DomainEvent('Logged in', LoggedIn, $Aggregate($user), $Command(LogInUser), $User($shopper), $ReadModel($loginView))
    DomainEvent('Registered user', RegisteredUser, $Aggregate($user), $Command(RegisterUser), $User($shopper), $ReadModel($registerView))
}

!endsub

!startsub RecipeManagement

SubDomain('Recipe Management', RecipeManagement) {
    DomainEvent('Added recipe', AddedRecipe, $Aggregate($recipe), $Command(AddRecipe), $User($shopper))
}

!endsub

!startsub MealPlanning

SubDomain('Meal Planning', MealPlanning) {
    DomainEvent('Removed meal from meal plan', RemovedMealFromMealPlan, $Aggregate($mealPlan), $Command(RemoveMealFromMealPlan), $User($shopper), $ReadModel($mealPlanView))
    DomainEvent('Added meal to meal plan', AddedMealToMealPlan, $Aggregate($mealPlan), $Command(AddMealToMealPlan), $User($shopper), $ReadModel($mealPlanView))
    DomainEvent('Created new meal plan', CreatedNewMealPlan, $Aggregate($mealPlan), $Command(CreateEmptyMealPlan), $User($shopper), $ReadModel($mealPlanView))
    DomainEvent('Made meal plan a favorite', MadeMealPlanAFavorite, $Aggregate($mealPlan), $Command(FavoriteMealPlan), $User($shopper), $ReadModel($mealPlanView))
}

!endsub

!startsub ShoppingPlanning

SubDomain('Shopping Planning', ShoppingPlanning) {
    DomainEvent('Shared shopping list with user', SharedShoppingListWithUser, $Aggregate($shoppingList), $Command(ShareShoppingListWithUser), $User($shopper), $ReadModel($sharingView))

    DomainEvent('Created shopping list template', CreatedShoppingListTemplate, $Aggregate($shoppingList), $Command(CreateShoppingListTemplate), $User($shopper), $ReadModel($shoppingListView))
    note "Is created from a shopping list." as TemplateNote
    CreatedShoppingListTemplate_Aggregate .. TemplateNote

    DomainEvent('Removed voucher', RemovedVoucher, $Aggregate($shoppingList), $Command(RemoveVoucherFromShoppingList), $User($shopper), $ReadModel($shoppingListView))
    DomainEvent('Added voucher', AddedVoucher, $Aggregate($shoppingList), $Command(AddVoucherToShoppingList), $User($shopper), $ReadModel($shoppingListView))
    note "This must also be possible while shopping, perhaps the user finds some vouchers in the shop." as AddVoucherNote
    AddedVoucher .. AddVoucherNote

    DomainEvent('Removed product', RemovedProduct, $Aggregate($shoppingList), $Command(RemoveProductFromShoppingList), $User($shopper), $ReadModel($shoppingListView))
    DomainEvent('Added product', AddedProduct, $Aggregate($shoppingList), $Command(AddProductToShoppingList), $User($shopper), $ReadModel($shoppingListView))
    DomainEvent('Marked checked ingredients of removed meal recipe', MarkedCheckedIngredientsOfRemovedMealRecipe, $Command(MarkCheckedIngredientsOfRemovedMealRecipe), $Aggregate($shoppingList), $ReadModel($shoppingListView))
    DomainEvent('Removed ingredients of removed meal from shopping list', RemovedIngredientsOfRemovedMealRecipe, $Command(RemoveMealIngredients), $Aggregate($shoppingList), $ReadModel($shoppingListView))
    DomainEvent('Added ingredients of meal', AddedIngredientsOfMealRecipe, $Command(AddMealIngredients), $Aggregate($shoppingList), $ReadModel($shoppingListView))
    DomainEvent('Added unchecked products from last shopping', AddedUncheckedProductsFromLastShopping, $Command(AddUncheckedProductsFromLastShopping), $Aggregate($shoppingList), $ReadModel($shoppingListView))
    DomainEvent('Added meal plan', AddedMealPlan, $Aggregate($mealPlan), $Command(AddMealPlanToShoppingList), $User($shopper), $ReadModel($shoppingListView))
    DomainEvent('Created new shopping list', CreatedNewShoppingList, $Aggregate($shoppingList), $Command(CreateShoppingList), $User($shopper))
    note "Can be created from a template, an old shopping list or from scratch.\nIt's possible that there are multiple lists" as ShoppingListCreationNote
    CreatedNewShoppingList_Aggregate .. ShoppingListCreationNote

    CreatedNewShoppingList -[hidden] AddedMealPlan
}

!endsub

!startsub Shopping

SubDomain('Shopping', Shopping) {
    DomainEvent('Ended shopping', EndedShopping, $Aggregate($shopping), $Command(EndShopping), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Received receipt', ReceivedReceipt, $Aggregate($shopping), $Command(ReceiveReceipt), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Payed', Payed, $Aggregate($shopping), $Command(Pay), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Redeemed all vouchers', RedeemedVouchers, $Aggregate($shoppingList), $ReadModel($voucherView))
    DomainEvent('Redeemed voucher', RedeemedVoucher, $Aggregate($shoppingList), $Command(RedeemVoucher), $User($shopper), $ReadModel($voucherView))
    DomainEvent('Presented vouchers', PresentedVouchers, $Aggregate($shoppingList), $Command(PresentVouchers), $ReadModel($voucherView))
    DomainEvent('Started checkout', StartedCheckout, $Aggregate($shopping), $Command(StartCheckout), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Checked item in shopping list', UncheckedItemInShoppingList, $Aggregate($shoppingList), $Command(UncheckItem), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Returned product to shelf', ReturnedProductToShelf, $Aggregate('Shopping cart'), $Command(ReturnProductToShelf), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Checked product in shopping list', CheckedItemInShoppingList, $Aggregate($shoppingList), $Command(CheckProduct), $User($shopper), $ReadModel($shoppingView))
    DomainEvent('Put product in shopping cart', PutProductInShoppingCartEvent, $Aggregate('Shopping cart'), $Command(PutProductInShoppingCart), $User($shopper), $ReadModel($shoppingView))
    note "This aggregate enables to show the user what is in the shopping cart." as ShoppingCartNote
    PutProductInShoppingCartEvent_Aggregate .. ShoppingCartNote

    DomainEvent('Started shopping with shopping list', StartedShoppingWithShoppingList, $Aggregate($shoppingList), $Command(StartShopping), $User($shopper), $ReadModel($shoppingView))
}

!endsub

@enduml